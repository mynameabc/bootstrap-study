<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="sys.role.storage.ExtendRoleMapper">

    <!-- 返回员工列表-未分配 -->
    <select id="getRoleEmployeeListForUndistributed" resultMap="sys.employee.storage.ExtendEmployeeMapper.BaseResultEmployeeExtendMap">
        SELECT * FROM (
        SELECT office.`name` AS officeName, employee.* FROM `sys_employee` AS employee LEFT JOIN `sys_office` AS office ON employee.`officeID` = office.`officeID`
        ) AS `employee` WHERE NOT EXISTS (SELECT employeeID FROM sys_role_employee WHERE roleID = #{roleID} AND employee.`employeeID` = employeeID)
        <if test="employeeDTO.name != null">
            and name = #{employeeDTO.name}
        </if>
        <if test="employeeDTO.email != null">
            and email = #{employeeDTO.email}
        </if>
        <if test="employeeDTO.mobile != null">
            and mobile = #{employeeDTO.mobile}
        </if>
        <if test="employeeDTO.jobNumber != null">
            and jobNumber = #{employeeDTO.jobNumber}
        </if>
        <if test="employeeDTO.realName != null">
            and realName = #{employeeDTO.realName}
        </if>
        <if test="employeeDTO.loginLock != -1">
            and loginLock = #{employeeDTO.loginLock}
        </if>
        <if test="employeeDTO.delFlag != -1">
            and delFlag = #{employeeDTO.delFlag}
        </if>
        <if test="employeeDTO.officeID != null">
            and officeID IN
            <foreach collection="officeIDSList" index="index" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <!-- 返回员工列表-已分配 -->
    <select id="getRoleEmployeeListForAssigned" resultMap="sys.employee.storage.ExtendEmployeeMapper.BaseResultEmployeeExtendMap">
        SELECT * FROM (
        SELECT office.`name` AS officeName, employee.* FROM `sys_employee` AS employee LEFT JOIN `sys_office` AS office ON employee.`officeID` = office.`officeID`
        ) AS `employee` WHERE EXISTS (SELECT employeeID FROM sys_role_employee WHERE roleID = #{roleID} AND employee.`employeeID` = employeeID)
    </select>

    <!-- 添加角色与员工关系 -->
    <insert id="addRoleEmployees">
        INSERT INTO sys_role_employee(roleID, employeeID)
        VALUES
        <foreach collection="IDS" index="index" item="item" separator="," >
          (#{roleID}, #{item})
        </foreach>
    </insert>

    <!-- 删除角色与员工的关系 -->
    <delete id="delRoleEmployee">
        delete from sys_role_employee where roleID = #{roleID} and employeeID = #{employeeID}
    </delete>

</mapper>
